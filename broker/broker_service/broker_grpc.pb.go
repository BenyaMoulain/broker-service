// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	// Responde el mensaje/comando del cliente con la IP y el reloj de
	// vector correspondiente.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Responde al admin con una IP elegida de forma aleatoria
	GetDNS(ctx context.Context, in *GetDNSRequest, opts ...grpc.CallOption) (*GetDNSResponse, error)
	// En caso de conflicto lee en un servidor DNS específico
	ReadConflict(ctx context.Context, in *ReadConflictRequest, opts ...grpc.CallOption) (*ReadConflictResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/broker.BrokerService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) GetDNS(ctx context.Context, in *GetDNSRequest, opts ...grpc.CallOption) (*GetDNSResponse, error) {
	out := new(GetDNSResponse)
	err := c.cc.Invoke(ctx, "/broker.BrokerService/GetDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ReadConflict(ctx context.Context, in *ReadConflictRequest, opts ...grpc.CallOption) (*ReadConflictResponse, error) {
	out := new(ReadConflictResponse)
	err := c.cc.Invoke(ctx, "/broker.BrokerService/ReadConflict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility
type BrokerServiceServer interface {
	// Responde el mensaje/comando del cliente con la IP y el reloj de
	// vector correspondiente.
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Responde al admin con una IP elegida de forma aleatoria
	GetDNS(context.Context, *GetDNSRequest) (*GetDNSResponse, error)
	// En caso de conflicto lee en un servidor DNS específico
	ReadConflict(context.Context, *ReadConflictRequest) (*ReadConflictResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (UnimplementedBrokerServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBrokerServiceServer) GetDNS(context.Context, *GetDNSRequest) (*GetDNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNS not implemented")
}
func (UnimplementedBrokerServiceServer) ReadConflict(context.Context, *ReadConflictRequest) (*ReadConflictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConflict not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	s.RegisterService(&_BrokerService_serviceDesc, srv)
}

func _BrokerService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_GetDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerService/GetDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetDNS(ctx, req.(*GetDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ReadConflict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConflictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ReadConflict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerService/ReadConflict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ReadConflict(ctx, req.(*ReadConflictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BrokerService_Read_Handler,
		},
		{
			MethodName: "GetDNS",
			Handler:    _BrokerService_GetDNS_Handler,
		},
		{
			MethodName: "ReadConflict",
			Handler:    _BrokerService_ReadConflict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/broker_service/broker.proto",
}
